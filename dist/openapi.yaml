openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []

  /users/MyRecipes:
    get:
      tags:
      - Users
      summary: Return the recipes of the logging user
      description: Get an array of recipes that were created by a specific user
      operationId: GetUserRecipes
      responses:
        "200":
          description: data about the user's created recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized

    post:
      tags:
      - Users
      summary: add recipe to the user's recipes list 
      description: add recipe to the user's recipes list 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullRecipeReview'
      responses:
        "200":
          description: The Recipe successfully added
        "400":
          description: Invalid input

  /users/FamilyRecipes:
    get:
      tags:
      - Users
      summary: Return the family recipes of the logging user
      description: Get an array of recipes that were created by a specific user
      responses:
        "200":
          description: data about the user's created recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyRecipe'
        "401":
          description: user is not authorized
    post:
      tags:
        - Users
      summary: Create a new family recipe
      description: Create a new recipe associated with the logged-in user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FamilyRecipe'
      responses:
        "201":
          description: Recipe created successfully
        "401":
          description: User is not authorized
  /users/last-viewed:
    get:
      summary: Get the  3 recipes viewed by the user
      description: |
        Retrieves the  3 recipes viewed by the logged-in user. If the user is not logged in, provides an option to log in using the website registration button.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipesList'
        '401':
          description: Unauthorized - User not logged in
      security:
        - cookieAuth: []
    post:
      tags:
      - Users
      summary: Add recipe to the viewed list of the user
      description: Add recipe to the viewed list of the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user viewed
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as viewed
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []

  

  /recipes:
    post:
      tags:
        - Recipes
      summary: Create a new recipe
      description: Create a new recipe with the provided recipe ID
      # parameters:
      #   - name: recipeId
      #     in: path
      #     description: Recipe's ID
      #     required: true
      #     schema:
      #       type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeInput'
      responses:
        '200':
          description: Recipe created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: Invalid request payload
        '500':
          description: Internal server error


  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    Recipe:
      type: object
      properties:
        recipe_id:
          type: integer
          description: Recipe identifier
        title:
          type: string
          description: Recipe title
        image:
          type: string
          description: Recipe image URL
        readyInMinutes:
          type: integer
          description: Time required to make the recipe
        popularity:
          type: integer
          description: Recipe popularity
        vegetarian:
          type: boolean
          description: Indicates if the recipe is vegetarian
        vegan:
          type: boolean
          description: Indicates if the recipe is vegan
        glutenFree:
          type: boolean
          description: Indicates if the recipe is gluten-free
    RecipeInput:
      type: object
      properties:
        title:
          type: string
          description: Recipe title
        image:
          type: string
          description: Recipe image URL
        readyInMinutes:
          type: integer
          description: Time required to make the recipe
        popularity:
          type: integer
          description: Recipe popularity
        vegetarian:
          type: boolean
          description: Indicates if the recipe is vegetarian
        vegan:
          type: boolean
          description: Indicates if the recipe is vegan
        glutenFree:
          type: boolean
          description: Indicates if the recipe is gluten-free
      required:
        - title
        - image
        - readyInMinutes
        - popularity
        - vegetarian
        - vegan
        - glutenFree
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        recipe_id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    FullRecipeReview:
        type: object
        properties:
          recipe_id:
            type: integer
            description: recipe identifier
            example: 102
          title:
            type: string
            description: recipe name
            example: Simple Macaroni and Cheese
          image:
            type: string
            description: recipe image
            format: URL
            example: https://spoonacular.com/recipeimages/655455-566x370.jpg
          readyInMinutes:
            type: integer
            description: the time takes to make this recipe
            example: 45
          popularity:
            type: integer
            description: how many likes got this recipe
            example: 5987
          vegetarian:
            type: boolean
            description: indication if the recipe is vegetarian
            example: false
          vegan:
            type: boolean
            description: indication if the recipe is vegan
            example: false
          glutenFree:
            type: boolean
            description: indication if the recipe is gluten free
            example: false
          IngredientsAndAmount:
            type: array
            description: ingredients list and the quantities.
            example: [ { name: "milk", number: 2 } ]
            items:
              type: object
              properties:
                name:
                  type: string
                number:
                  type: integer
              example: { name: "milk", number: 2 }
          instructions:
            type: string
            description: The instructions for preparing the recipe
          servings:
            type: integer
            format: int64
            description: The number of servings the recipe makes

    FamilyRecipe:
      type: object
      properties:
        recipe_id:
          type: integer
          description: recipe identifier
          example: 102
        recipeName:
          type: string
          description: name of the recipe
          example: Grandma's Apple Pie
        recipeOwner:
          type: string
          description: person who owns the recipe
          example: Grandma Mary
        components:
          type: array
          description: list of ingredients and their quantities
          items:
            type: object
            properties:
              name:
                type: string
                description: ingredient name
              quantity:
                type: string
                description: quantity or measurement of the ingredient
            example:
              - name: apples
                quantity: 4
              - name: sugar
                quantity: 1 cup
        preparationMethod:
          type: string
          description: method of preparing the recipe
        images:
          type: array
          description: pictures of the food or family members preparing the food
          items:
            type: string
            format: URL
          example:
            - https://example.com/image1.jpg
            - https://example.com/image2.jpg
        specialOccasions:
          type: array
          description: special occasions or traditions associated with the recipe
          items:
            type: string
          example:
            - Hanukkah
            - Passover
        cookingTime:
          type: integer
          description: total cooking time in minutes
          example: 60
        serves:
          type: integer
          description: number of servings the recipe makes
          example: 8

    RecipesList:
      type: array
      numberofItems: 3
      items:
        $ref: '#/components/schemas/RecipePreview'